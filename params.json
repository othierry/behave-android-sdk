{"name":"Behave-java-sdk","tagline":"Behave Java SDK","body":"# Introduction\r\n\r\nOur Java library lets you easily identify your users, track their behaviours, handle rewards and make full use of the API.\r\n\r\n0. [Getting started](#getting-started)\r\n  * [Adding your API token to your settings](#adding-your-api-token-to-your-settings)\r\n  * [Initializing the SDK](#initializing-the-sdk)\r\n1. [Players](#players)\r\n  * [Identify](#identify)\r\n  * [Retrieve a player](#retrieve-a-player)\r\n2. [Behaviours](#behaviours)\r\n  * [Simple tracking](#simple-tracking)\r\n  * [Contextual tracking](#contextual-tracking)\r\n  * [Using the tracking response](#using-the-tracking-response)\r\n3. [Leaderboards](#leaderboards)\r\n  * [Getting leaderboard results](#getting-leaderboard-current-results)\r\n  * [Getting leaderboard results for a player](#getting-leaderboard-results-for-the-currently-identified-player)\r\n4. [Badges](#badges)\r\n  * [Getting unlocked badges of a player](#getting-unlocked-badges-of-the-currently-identified-player)\r\n  * [Getting locked badges of a player](#getting-locked-badges-of-the-currently-identified-player)\r\n5. [Listeners](#listeners)\r\n  * [Adding a listener](#adding-a-listener)\r\n  * [Removing a listener](#removing-a-listener)\r\n\r\n## Getting started\r\n\r\nYou can find the API token <a href=\"http://dashboard.behave.io/#/settings\" target=\"_blank\">from your dashboard in your app settings</a>.\r\n\r\n### Adding your API token to your settings\r\n\r\nEdit the xml `res/values/string.xml` and add the following entry:\r\n\r\n```html\r\n<string name=\"behave_api_token\">YOUR_API_TOKEN_HERE</string>\r\n```\r\n\r\n### Initializing the SDK\r\n\r\nBefore starting to do anything, you first need to initialize the SDK with a valid Context Object.\r\n\r\nFor example in your main Activty onCreate() method, you would do the following (example)\r\n\r\n```java\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n  super.onCreate(savedInstanceState);\r\n\r\n  // Initialize behave\r\n  Behave behave = Behave.getInstance(this); // or directly Behave.getInstance(this.getApplicationContext());\r\n  // ...\r\n}\r\n```\r\n\r\nAfter you have initialized Behave with a valid Context, you can simply do the following in the rest of your application.\r\n\r\n```java\r\nBehave behave = Behave.getInstance();\r\n```\r\n\r\n## Players\r\n\r\n### Identify\r\n\r\nYou need to identify your users at least once so their player profiles can be created. You can optionally attribute some traits to the player that you can update/retrieve at any time.\r\n\r\nThe identified Player can be retrieved using `Behave.getInstance().getPlayer()`\r\n\r\n* **Method (instance method):** \r\n```java\r\nBehave.identify(\r\n  String referenceId, \r\n  [Map<String, Object> traits], \r\n  [BehaveApiCallback<Player> callback]\r\n) \r\n```\r\n* **Parameters:**\r\n\r\n| Name          | Type          | Value  |\r\n| ------------- |:-------------:| ------:|\r\n| referenceId   | String | **(Required)** The id of the player in YOUR database |\r\n| traits        | Map<String, Object> | **(optional)** The custom traits you assign to the player. You can use any key-value pair to give attributes to the player. The 2 special fields: ``name`` and ``picture`` will be used as display information from the admin interface. We recommend to specify them if you can.  |\r\n| callback | BehaveApiCallback<Player> | **(optional)** A callback implementation\r\n\r\nExample:\r\n\r\n```java\r\n// Sample traits\r\nMap<String, Object> traits = new HashMap<String, Object>();\r\ntraits.put(\"name\", \"Olivier\");\r\ntraits.put(\"picture\", \"https://path_to_picture\");\r\ntraits.put(\"email\", \"olivier@behave.io\");\r\ntraits.put(\"foo\", \"bar\");\r\n\r\nBehave.getInstance().identify(\"42\", traits, new BehaveApiCallback<Player>() {\r\n  @Override\r\n  public void success(Player player) {\r\n    // Use either player or Behave.getInstance().getPlayer()\r\n  }\r\n  @Override\r\n  public void failure(Error error, Response response) {\r\n    // Handle error\r\n  }\r\n});\r\n```\r\n\r\nA player has the following members with associated getters:\r\n\r\n| Name          | Type          | Value  |\r\n| ------------- |:-------------:| ------:|\r\n| id           | String | The id of the Player |\r\n| referenceId  | String | The custom unique id you have specified to identify this player |\r\n| points        | int | The number of points of the player (default to 0) |\r\n| level         | Level | The current level of the player (and its progress), null otherwise. |\r\n| traits        | Map<String, Object> | The custom traits you have given to the player |\r\n\r\n**NOTE:** The player will load asynchronously so calling `behave.getInstance().getPlayer()` right after `behave.getInstance().identify()` will return the right Player object but its points, level and traits may not have loaded yet. Your app can easily listen to events to have control when the player has been fully identified (loaded) and more. Please refer to [Listeners](#listeners) for more information.\r\n\r\n### Retrieve a player\r\n\r\nSometimes you want to retrieve a player's profile without having to identify() him, you can easily by using the `fetch()` instance method of the Player class.\r\n\r\n* **Method (instance method):** \r\n```java\r\nPlayer.fetch(\r\n  BehaveApiCallback<Player>\r\n)\r\n```\r\n* **Parameters:**\r\n\r\n| Name          | Type          | Value  |\r\n| ------------- |:-------------:| -----:|\r\n| callback | BehaveApiCallback<Player> | **(required)** a callback implementation\r\n\r\nExample:\r\n\r\n```java\r\nPlayer player = new Player(\"42\");\r\nplayer.fetch(new BehaveApiCallback<Player>() {\r\n  @Override\r\n  public void success(Player player) {\r\n    // Use the player. The player passed as argument is the SAME object as the one defined above. \r\n    // This just avoids having to use final keyword everywhere\r\n  }\r\n  @Override\r\n  public void failure(Error error, Response response) {\r\n    // Handle error\r\n  }\r\n})\r\n```\r\n\r\n## Behaviours\r\n\r\nYou need to track your players behaviours if you want to reward them for doing so! Tracking can be either **simple** or **contextual**. You can specify ANY key value pairs to describe the context to which the behaviour was taken (See examples below):\r\n\r\n* **Method (instance method):** \r\n```java\r\nBehave.track(\r\n  String behaviour, \r\n  [Map<String, Object> context], \r\n  [BehaveApiCallback<TrackResult> callback]\r\n)\r\n```\r\n* **Parameters:**\r\n\r\n| Name          | Type          | Value  |\r\n| ------------- |:-------------:| -----:|\r\n| behaviour      | String | **(Required)** The name of the behaviour you are tracking  |\r\n| context      | Map<String, Object> | **(optional)** You can specify ANY key value pairs to describe the context to which the behaviour was taken. Optionally, A special field ``timestamp`` **(unix timestamp)** defines when was this behaviour taken. **Make sure you specify a timestamp when importing data**. We will use the server's current time by default. |\r\n| callback | BehaveApiCallback<TrackResult> | **(optional)** a callback implementation\r\n\r\n**NOTE:** Your app can easily listen to reward events to have control when the player has earned points, unlocked badges and more. Please refer to [Listeners](#listeners) for more information.\r\n\r\n### Simple tracking\r\n\r\n```java\r\nBehave.getInstance().track(\"login\");\r\n```\r\n\r\n### Contextual tracking\r\n\r\n```java\r\nMap<String, Object> context = new HashMap<String, Object>();\r\ncontext.put(\"placeId\", \"432442\");\r\ncontext.put(\"withMates\", Arrays.asList(\"324\", \"923\", \"31236\"));\r\n\r\nBehave.getInstance().track(\"check-in\", context);\r\n```\r\n\r\n### Using the tracking response\r\n\r\nWhen you track a user behaviour, you get back a response of basically what happened. The response contains the rewards that the tracking has triggered (from your [recipes](http://dashboard.behave.io/recipes)).\r\n\r\nThe response **always contains 3 methods**.\r\n\r\n| Name          | Return type          | Value  |\r\n| ------------- |:-------------:| -----:|\r\n| getBadges()   | Array[Badge] | The unlocked badges |\r\n| getPoints()        | Points | With 2 methods: ``getEarned()`` and ``getBalance()``. ``getEarned()`` is the number of points the user earned by taking the action or 0 if no points earned, ``getBalance()`` is the updated balance of the player points |\r\n| getLevel()         | Level | The current level of the player, null otherwise. |\r\n\r\nBehave SDK will publish events when player is identified, when badges are unlocked, when a level is reached and more. Refer to [Listeners](#listeners) for more information\r\n\r\nExample:\r\n\r\n```java\r\nMap<String, Object> context = new HashMap<String, Object>();\r\ncontext.put(\"placeId\", \"432442\");\r\ncontext.put(\"withMates\", Arrays.asList(\"324\", \"923\", \"31236\"));\r\n\r\n\r\nBehave.getInstance().track(\"check-in\", context, new BehaveApiCallback<TrackResult>() {\r\n  @Override\r\n  public void success(TrackResult trackResult) {\r\n    // Use trackResult\r\n    // trackResult.getPoints().getEarned()\r\n    // trackResult.getPoints().getBalance()\r\n    // trackResult.getBadges()\r\n    // trackResult.getLevel().getProgress()\r\n    // trackResult.getLevel().isNew() (will be true when did just level up)\r\n    // ...\r\n  }\r\n  @Override\r\n  public void failure(Error error, Response response) {\r\n    // Handle error\r\n  }\r\n});\r\n```\r\n\r\n## Leaderboards\r\n\r\n**Note:** If you want to test you leaderboard results, you can directly use [the built-in simulator](http://dashboard.behave.io/#/simulator) to test API calls.\r\n\r\n### Getting leaderboard current results\r\n\r\nYou can fetch the actual results of any leaderboard at anytime. Here is an example:\r\n\r\n* **Method (instance method):** \r\n```java\r\nLeaderboard.fetchResults(\r\n  [Map<String, Object> options], \r\n  BehaveApiCallback< List<LeaderboardScore> > callback\r\n)\r\n```\r\n* **Parameters:**\r\n\r\n| Name          | Type          | Value      |\r\n| ------------- |:-------------:| ----------:|\r\n| options | Map<String, Object> | **(Optional)** Result fetching options |\r\n| options | BehaveApiCallback< List<LeaderboardScore> > | **(Required)** a callback implementation |\r\n\r\nExample\r\n\r\n```java\r\n// We want to fetch the top 500\r\nMap<String, Object> options = new HashMap<String, Object>();\r\noptions.put(\"limit\", 500);\r\n\r\nLeaderboard leaderboard = new Leaderboard(\"points\");\r\nleaderboard.fetchResults(options, new BehaveApiCallback< List<LeaderboardScore> > {\r\n  @Override\r\n  public void success(List<LeaderboardScore> results) {\r\n    // Use results\r\n    for (LeaderboardScore score : results) {\r\n      Log.v(\"BehaveExample\", \"[Position] \" + score.getPosition() + \r\n                          \" | [Score] \"    + score.getScore() + \r\n                          \" | [Player] \"   + score.getPlayer().getReferenceId();\r\n    }\r\n  }\r\n  @Override\r\n  public void failure(Error error, Response response) {\r\n    // Handle error\r\n  }  \r\n});\r\n```\r\n\r\nAvailable options are:\r\n\r\n| Name          | Type          | Value      |\r\n| ------------- |:-------------:| ----------:|\r\n| page          | int        | (Optional) The results page to fetch. Default is 1|\r\n| limit         | int        | (Optional) The max number of results per page. MAXIMUM is 1000 |\r\n| offset        | int        | (Optional) The maximum position to fetch, default is 0 => None |\r\n| player_id     | String | A player's reference_id (Optional). If specified, the given player will ALWAYS appear in the results (not duplicated). It is very useful if for example you want to always include the current player in the results |\r\n| players | Array[String] | (Optional) The players to include in the results, default is null => ALL |\r\n| positions     | String        | (Optional) The way positions are calculated. Possible values are `relative` and `absolute`. `relative` will set the positions according to the players that are included in the results, `absolute` will set the positions according to all the players in the leaderboards. This is useful when for example you want to fetch the results for a player and his friends only. In this situation you could pass `relative` so that the positions are computed between friends and not between all the players in the leaderboards. |\r\n| context     | Map<String, Object>         | (Optional) You can segment results according to a specific context. For example, on a leaderboard with ``all-time`` timeframe, if you want to get the results of weeks 42 only you could have ``{ timestamp: '>=1381701600,<1382306400' }``. You can also use any custom key you have specified in the context when tracking behaviours using ``track()``.  **On large leaderboards this can have an impact on performances.** |\r\n\r\n### Getting leaderboard results for a player\r\n\r\nYou can also fetch results for a particular player. Let's say you want to fetch the results of a player on one, many or even ALL the leaderboards **the player is in** then you can use this to do so.\r\n\r\n* **Method (instance method):** \r\n```java\r\nPlayer.fetchLeaderboardResults(\r\n  [Map<String, Object> options],\r\n  BehaveApiCallback< List<LeaderboardScore> > callback\r\n)\r\n```\r\n* **Parameters:** \r\n\r\n| Name          | Type          | Value      |\r\n| ------------- |:-------------:| ----------:|\r\n| options  | Map<String, Object> | **(Optional)** Result fetching options  |\r\n| callback  | BehaveApiCallback< List<LeaderboardScore> > | **(Required)** A callback implementation  |\r\n\r\nAvailable options are:\r\n\r\n| Name          | Type          | Value      |\r\n| ------------- |:-------------:| ----------:|\r\n| leaderboards  | Array[String] | (Optional) Leaderboards to process, if empty all the leaderboards will be processed.  |\r\n| max           | Number        | (Optional) The maximum player position acceptance for the leaderboard to be selected.  |\r\n\r\nExample:\r\n\r\n```java\r\nPlayer player = new Player(\"42\");\r\n// OR if we want for the current player\r\nPlayer player = Behave.getInstance().getPlayer()\r\n\r\nplayer.fetchLeaderboardResults(new BehaveApiCallback< List<LeaderboardScore> >() {\r\n  @Override\r\n  public void success(List<LeaderboardScore> results) {\r\n    // Use results\r\n    for (LeaderboardScore score : results) {\r\n      Log.v(\"BehaveExample\", \"[Position] \"    + score.getPosition() + \r\n                          \" | [Score] \"       + score.getScore() + \r\n                          \" | [Leaderboard] \" + score.getLeaderboard().getReferenceId();\r\n    }\r\n  }\r\n  @Override\r\n  public void failure(Error error, Response response) {\r\n    // Handle error\r\n  }  \r\n});\r\n```\r\n\r\nFor example, if I want to fetch all the leaderboard results for player where he/she is in the top 3:\r\n\r\n\r\n```java\r\nMap<String, Object> options = new HashMap<String, Object>();\r\noptions.put(\"max\", 3);\r\n\r\nBehave.getInstance().getPlayer().fetchLeaderboardResults(options, new BehaveApiCallback< List<LeaderboardScore> >() {\r\n  @Override\r\n  public void success(List<LeaderboardScore> results) {\r\n    // Use results\r\n    for (LeaderboardScore score : results) {\r\n      Log.v(\"BehaveExample\", \"[Position] \"    + score.getPosition() + \r\n                          \" | [Score] \"       + score.getScore() + \r\n                          \" | [Leaderboard] \" + score.getLeaderboard().getReferenceId();\r\n    }\r\n  }\r\n  @Override\r\n  public void failure(Error error, Response response) {\r\n    // Handle error\r\n  }  \r\n});\r\n```\r\n\r\n### Getting a single leaderboard result for a player\r\n\r\nYou can also fetch the current result of a player on just one specific leaderboard\r\n\r\n* **Method (instance method):** \r\n```java\r\nPlayer.fetchLeaderboardResult(\r\n  String referenceId, \r\n  BehaveApiCallback<LeaderboardScore> callback\r\n)\r\n```\r\n* **Parameters:** \r\n\r\n| Name          | Type          | Value      |\r\n| ------------- |:-------------:| ----------:|\r\n| referenceId  | String | **(Required)** The leaderboard's reference_id (ex: \"points\")  |\r\n| callback  | BehaveApiCallback<LeaderboardScore> | **(Required)** A callback implementation  |\r\n\r\nExample:\r\n\r\n```java\r\nBehave.getInstance().getPlayer().fetchLeaderboardResult(\"points\", new BehaveApiCallback<LeaderboardScore>() {\r\n  @Override\r\n  public void success(LeaderboardScore score) {\r\n    // Use results\r\n    Log.v(\"BehaveExample\", \"[Position] \"    + score.getPosition() + \r\n                        \" | [Score] \"       + score.getScore() + \r\n                        \" | [Leaderboard] \" + score.getLeaderboard().getReferenceId();\r\n  }\r\n  @Override\r\n  public void failure(Error error, Response response) {\r\n    // Handle error\r\n  }  \r\n});\r\n```\r\n\r\n## Badges\r\n\r\n### Getting unlocked badges of a player\r\n\r\n* **Method (instance method):** \r\n```java\r\nPlayer.fetchBadges(\r\n  BehaveApiCallback< List<PlayerBadge> > callback\r\n)\r\n```\r\n* **Parameters:** \r\n\r\n| Name          | Type          | Value      |\r\n| ------------- |:-------------:| ----------:|\r\n| callback  | BehaveApiCallback< List<PlayerBadge> > | **(Required)** A callback implementation  |\r\n\r\nExample:\r\n\r\n```java\r\nPlayer player = Behave.getInstance().getPlayer();\r\n\r\nplayer.fetchBadges(new BehaveApiCallback< List<PlayerBadge> >() {\r\n  @Override\r\n  public void success(List<PlayerBadge> playerBadges) {\r\n    // Use results\r\n    for (PlayerBadge playerBadge : playerBadges) {\r\n      // Get badge\r\n      Badge badge = playerBadge.getBadge();\r\n      // Get unlocked at Date\r\n      Date unlockedAt = player.getLastUnlockedAt();\r\n    }\r\n  }\r\n  @Override\r\n  public void failure(Error error, Response response) {\r\n    // Handle error\r\n  }  \r\n});\r\n```\r\n\r\n### Getting locked badges of a player\r\n\r\n* **Method (instance method):** \r\n```java\r\nPlayer.fetchLockedBadges(\r\n  BehaveApiCallback< List<PlayerBadge> > callback\r\n)\r\n```\r\n* **Parameters:** \r\n\r\n| Name          | Type          | Value      |\r\n| ------------- |:-------------:| ----------:|\r\n| callback  | BehaveApiCallback< List<Badge> > | **(Required)** A callback implementation  |\r\n\r\nExample:\r\n\r\n```java\r\nPlayer player = Behave.getInstance().getPlayer();\r\n\r\nplayer.fetchLockedBadges(new BehaveApiCallback< List<Badge> >() {\r\n  @Override\r\n  public void success(List<Badge> badges) {\r\n    // Use results\r\n  }\r\n  @Override\r\n  public void failure(Error error, Response response) {\r\n    // Handle error\r\n  }  \r\n});\r\n```\r\n\r\n## Listeners\r\n\r\nThe JavaScript SDK publishes many events that your app can listen in order to update its state and the UI\r\n\r\n### Adding a listener\r\n\r\n```java\r\nBehave.getInstance().addListener(new BehaveListener() {     \r\n  @Override\r\n  public void identified(Player player) {\r\n    // Called when your current player is fully identified AND Loaded\r\n  }\r\n  \r\n  @Override\r\n  public void didUnlockBadge(Badge badge) {\r\n    // Called when your current player has unlocked a new badge\r\n  }\r\n  \r\n  @Override\r\n  public void didLevelUp(Level level) {\r\n    // Called when your current player did just level up\r\n  }\r\n  \r\n  @Override\r\n  public void didEarnPoints(Points points) {\r\n    // Called when your current player has earned Points\r\n    // points.getEarned()\r\n    // points.getBalance()\r\n  }\r\n});\r\n```\r\n\r\n### Removing a listener\r\n\r\n```java\r\nBehave.getInstance().removeListener(listener);\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}